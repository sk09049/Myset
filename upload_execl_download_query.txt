/*Upload Excel File from angular(2/4) to Spring to build the Insert Queries*/


/*Service for upload the file */
import { Injectable } from '@angular/core';
import { Http } from '@angular/http';

@Injectable()
export class UploadService {

  constructor(private http:Http) { }

  uploadFile(file:File){
    let formdata=new FormData();
    formdata.append('file',file);
  return this.http.post('http://localhost:8080/fileupload',formdata);
  }
}

==============================================================================

/*Component for file upload and download the queries*/

import { UploadService } from './service/upload.service';
import { Component, ElementRef, ViewChild } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
      @ViewChild('uploadfile') inputEl: ElementRef;
constructor(private uploadService:UploadService){}
  uploadFile(){
    this.uploadService.uploadFile(this.inputEl.nativeElement.files.item(0))
    .subscribe(data=>{
      console.log(data.json());
      this.download('Query.sql',data.json().query);
    })
    console.log();
  }

  download(filename, text) {
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}

}

===================================================================================

/*Spring File Upload Controller*/
package com.example.demo;

import java.io.IOException;
import java.util.Map;

import org.apache.commons.collections4.map.HashedMap;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

@RestController
@CrossOrigin("*")
public class FileUploadController {


@RequestMapping(value="fileupload",method=RequestMethod.POST)
public Map<String, Object> fileUpload(@RequestParam("file") MultipartFile file) {
	System.out.println("name of the file"+file.getName());
	Map<String,Object> map=new HashedMap<>();
	String returnString="";
	try {
		returnString= ReadExcelFile.getQueryString(file);
	} catch (EncryptedDocumentException | InvalidFormatException | IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	map.put("query", returnString);
	return map;
}


}


======================================================================================

/*Java  file for read the excel file and genearte insert queries from it */
package com.example.demo;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import org.springframework.web.multipart.MultipartFile;

public class ReadExcelFile {

	public static String getQueryString(MultipartFile multipart) throws EncryptedDocumentException, InvalidFormatException, IOException {
		Workbook workbook = WorkbookFactory.create(multipart.getInputStream());
		DataFormatter format = new DataFormatter();

		StringBuilder querStringResult=new StringBuilder();
		StringBuilder querString = null;
		StringBuilder queryStringColumns = null;
		int noOfColumns = 0;

		for (Sheet sheet : workbook) {
			querStringResult.append("\n/* insert query for table ::"+sheet.getSheetName() +" */\n");
			querString = new StringBuilder();
			int rowcount = 0;
			for (Row row : sheet) {
				if (rowcount == 0) {
					queryStringColumns = new StringBuilder();
					queryStringColumns.append("insert into " + sheet.getSheetName() + "(");
					for (Cell cell : row) {
						queryStringColumns.append(format.formatCellValue(cell) + ",");
					}
					noOfColumns = row.getLastCellNum();

					queryStringColumns.setLength(queryStringColumns.length() - 1);
					queryStringColumns.append(") values");
					querString.append(queryStringColumns);
				} else {
					querString.append("(");
					for (int cn = 0; cn < noOfColumns; cn++) {
						Cell cell = row.getCell(cn);
						if (cell == null) {
							querString.append(null + ",");
						} else {
							switch (cell.getCellTypeEnum()) {
							case BOOLEAN:
								querString.append(cell.getBooleanCellValue() + ",");
								break;
							case STRING:
								querString.append("'" + cell.getRichStringCellValue().getString() + "',");
								break;
							case NUMERIC:
								if (DateUtil.isCellDateFormatted(cell)) {
									querString.append("'" + cell.getDateCellValue() + "',");
								} else {
									querString.append(cell.getNumericCellValue() + ",");
								}
								break;
							default:
								querString.append(null + ",");
							}
						}

					}
					querString.setLength(querString.length() - 1);
					querString.append("),");
				}

				rowcount++;
				if (rowcount % 2 == 0) {
					querString.setLength(querString.length() - 1);
					querStringResult.append(querString);
					querString=new StringBuilder();
					querString.append("\n"+queryStringColumns);
				}

			}
			if (rowcount % 2 != 0) {
			querString.setLength(querString.length() - 1);
			querStringResult.append(querString);
			}
		}

		workbook.close();

		System.out.println(querStringResult);
		return querStringResult.toString();
	}

}

===========================================================================================
Reference:read excel files in java :https://www.callicoder.com/java-read-excel-file-apache-poi/
